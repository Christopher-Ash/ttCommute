package com.example.ttcommute;

public class RouteCalculator {
    //PBR_Coordinates array holds cooridinates of the Priority Bus route. From these points the waypoints for public routing along this route will be obtained
    double[][] PBR_coordinates = {{10.631967, -61.284461}, {10.63169, -61.28571}, {10.63141, -61.28681}, {10.63133, -61.28707}, {10.6313, -61.28718}, {10.63113, -61.28781}, {10.63092, -61.28859}, {10.63076, -61.28916}, {10.63067, -61.28944}, {10.63048, -61.28994}, {10.63027, -61.29042}, {10.63001, -61.29097}, {10.62931, -61.2924}, {10.6291, -61.29285}, {10.6283, -61.29453}, {10.62805, -61.29506}, {10.62756, -61.29607}, {10.6263, -61.29874}, {10.62623, -61.29894}, {10.62605, -61.29953}, {10.62593, -61.30037}, {10.62596, -61.30096}, {10.626, -61.30176}, {10.626, -61.30187}, {10.62606, -61.30279}, {10.62609, -61.30334}, {10.62611, -61.30369}, {10.62621, -61.30522}, {10.62622, -61.30549}, {10.62624, -61.30597}, {10.62625, -61.30643}, {10.6263, -61.30712}, {10.62634, -61.30786}, {10.62636, -61.30844}, {10.62639, -61.30878}, {10.62644, -61.30946}, {10.6265, -61.3105}, {10.62652, -61.3108}, {10.62658, -61.31168}, {10.62659, -61.31202}, {10.62663, -61.31264}, {10.62674, -61.31456}, {10.62683, -61.31603}, {10.62692, -61.31727}, {10.62699, -61.31798}, {10.62703, -61.31837}, {10.62721, -61.31911}, {10.62738, -61.31968}, {10.62755, -61.32009}, {10.62764, -61.32029}, {10.62766, -61.32032}, {10.62793, -61.32083}, {10.62801, -61.32097}, {10.62846, -61.32165}, {10.62927, -61.32264}, {10.62957, -61.32303}, {10.62997, -61.32351}, {10.63044, -61.32409}, {10.63088, -61.32463}, {10.63241, -61.32651}, {10.63274, -61.3269}, {10.63339, -61.32767}, {10.63408, -61.3286}, {10.63417, -61.32875}, {10.63431, -61.32893}, {10.63447, -61.32922}, {10.63465, -61.3296}, {10.63478, -61.32989}, {10.63494, -61.33028}, {10.63494, -61.33029}, {10.63509, -61.33076}, {10.63519, -61.33125}, {10.63523, -61.33146}, {10.63527, -61.33165}, {10.63532, -61.33227}, {10.63536, -61.33282}, {10.63541, -61.33348}, {10.63543, -61.33372}, {10.63547, -61.33426}, {10.63554, -61.33515}, {10.63556, -61.33541}, {10.63563, -61.3366}, {10.6357, -61.33758}, {10.63578, -61.33836}, {10.63578, -61.33837}, {10.63586, -61.33888}, {10.63599, -61.33968}, {10.63616, -61.34046}, {10.63625, -61.34082}, {10.63635, -61.34123}, {10.63654, -61.34181}, {10.63662, -61.34208}, {10.6367, -61.3423}, {10.63682, -61.34263}, {10.63683, -61.34267}, {10.63705, -61.34328}, {10.63711, -61.34345}, {10.63726, -61.34391}, {10.63748, -61.34457}, {10.63749, -61.3446}, {10.63795, -61.34591}, {10.63817, -61.34652}, {10.6384, -61.34717}, {10.63853, -61.34753}, {10.63862, -61.34778}, {10.63885, -61.34842}, {10.63894, -61.3487}, {10.63898, -61.34882}, {10.63902, -61.34896}, {10.63905, -61.34912}, {10.63915, -61.34949}, {10.63919, -61.34959}, {10.63932, -61.34993}, {10.63934, -61.34997}, {10.63938, -61.35007}, {10.63953, -61.3504}, {10.63978, -61.3511}, {10.64044, -61.35295}, {10.64096, -61.35439}, {10.64136, -61.35552}, {10.64161, -61.35622}, {10.64168, -61.3564}, {10.64217, -61.35779}, {10.64223, -61.35798}, {10.64239, -61.35844}, {10.64252, -61.35883}, {10.64279, -61.35977}, {10.64298, -61.36045}, {10.64314, -61.36109}, {10.64326, -61.36148}, {10.64329, -61.3616}, {10.64332, -61.36175}, {10.64337, -61.36208}, {10.64348, -61.36266}, {10.64356, -61.36325}, {10.64365, -61.36432}, {10.64369, -61.3651}, {10.64378, -61.36778}, {10.64379, -61.36884}, {10.64378, -61.36928}, {10.64378, -61.3693}, {10.64378, -61.36931}, {10.64379, -61.36932}, {10.64379, -61.36934}, {10.64379, -61.36935}, {10.64379, -61.36937}, {10.64379, -61.36938}, {10.64379, -61.36939}, {10.64379, -61.36941}, {10.64379, -61.36942}, {10.64379, -61.36944}, {10.64379, -61.36945}, {10.64379, -61.36947}, {10.64379, -61.36948}, {10.64379, -61.36949}, {10.64379, -61.36951}, {10.64379, -61.36952}, {10.64379, -61.36954}, {10.64379, -61.36955}, {10.64379, -61.36956}, {10.64379, -61.36958}, {10.64379, -61.36959}, {10.64379, -61.36961}, {10.64379, -61.36962}, {10.64379, -61.36963}, {10.64379, -61.36965}, {10.64379, -61.36966}, {10.64379, -61.36968}, {10.64379, -61.36969}, {10.64379, -61.3697}, {10.64379, -61.36972}, {10.64379, -61.36973}, {10.64379, -61.36975}, {10.64379, -61.36976}, {10.64379, -61.36977}, {10.64379, -61.36979}, {10.64379, -61.3698}, {10.64379, -61.36982}, {10.6438, -61.36983}, {10.6438, -61.36984}, {10.6438, -61.36986}, {10.6438, -61.36987}, {10.6438, -61.36989}, {10.6438, -61.3699}, {10.6438, -61.36992}, {10.6438, -61.36993}, {10.6438, -61.36994}, {10.6438, -61.36996}, {10.6438, -61.36997}, {10.6438, -61.36999}, {10.6438, -61.37}, {10.6438, -61.37001}, {10.6438, -61.37003}, {10.6438, -61.37004}, {10.6438, -61.37006}, {10.6438, -61.37007}, {10.6438, -61.3701}, {10.6438, -61.37011}, {10.6438, -61.37012}, {10.6438, -61.37014}, {10.6438, -61.37015}, {10.6438, -61.37017}, {10.6438, -61.37018}, {10.6438, -61.37019}, {10.6438, -61.37021}, {10.6438, -61.37022}, {10.6438, -61.37024}, {10.6438, -61.37025}, {10.6438, -61.37026}, {10.6438, -61.37028}, {10.6438, -61.37029}, {10.6438, -61.37031}, {10.6438, -61.37032}, {10.6438, -61.37033}, {10.64381, -61.37035}, {10.64381, -61.37036}, {10.64381, -61.37038}, {10.64381, -61.37039}, {10.64381, -61.3704}, {10.64381, -61.37042}, {10.64381, -61.37043}, {10.64381, -61.37045}, {10.64381, -61.37046}, {10.64381, -61.37047}, {10.64381, -61.37049}, {10.64381, -61.3705}, {10.64381, -61.37052}, {10.64381, -61.37053}, {10.64381, -61.37055}, {10.64381, -61.37056}, {10.64381, -61.37057}, {10.64381, -61.37059}, {10.64381, -61.3706}, {10.64381, -61.37062}, {10.64381, -61.37063}, {10.64381, -61.37064}, {10.64381, -61.37066}, {10.64381, -61.37067}, {10.64381, -61.37069}, {10.64382, -61.37217}, {10.64388, -61.3738}, {10.64388, -61.37429}, {10.64393, -61.3753}, {10.64395, -61.37693}, {10.64396, -61.37735}, {10.64396, -61.37767}, {10.64401, -61.37959}, {10.64406, -61.38201}, {10.64406, -61.38205}, {10.64414, -61.38531}, {10.64414, -61.38544}, {10.64416, -61.38637}, {10.64417, -61.38687}, {10.64418, -61.38724}, {10.64418, -61.38771}, {10.64418, -61.38828}, {10.64418, -61.38875}, {10.64419, -61.38924}, {10.64421, -61.3901}, {10.64424, -61.39119}, {10.64425, -61.39171}, {10.6443, -61.39278}, {10.64431, -61.3932}, {10.64434, -61.39472}, {10.64437, -61.39525}, {10.64438, -61.39541}, {10.6444, -61.39574}, {10.64444, -61.39597}, {10.6446, -61.39656}, {10.64484, -61.39727}, {10.64557, -61.39905}, {10.64572, -61.39945}, {10.64573, -61.3995}, {10.64578, -61.39963}, {10.64599, -61.40018}, {10.64613, -61.40053}, {10.64633, -61.40104}, {10.64637, -61.40118}, {10.64639, -61.40121}, {10.64644, -61.40132}, {10.64646, -61.40138}, {10.64648, -61.40143}, {10.64654, -61.40159}, {10.64664, -61.40186}, {10.6469, -61.40254}, {10.64793, -61.40511}, {10.648, -61.4053}, {10.64816, -61.4057}, {10.64893, -61.40783}, {10.64929, -61.40879}, {10.64959, -61.40949}, {10.65002, -61.41059}, {10.6506, -61.41208}, {10.65081, -61.41265}, {10.65102, -61.41324}, {10.65115, -61.41362}, {10.65116, -61.41367}, {10.65118, -61.41373}, {10.65123, -61.4139}, {10.65133, -61.41423}, {10.6514, -61.41456}, {10.65146, -61.41485}, {10.65151, -61.41512}, {10.65152, -61.41515}, {10.65154, -61.41554}, {10.65158, -61.41601}, {10.65158, -61.41633}, {10.65158, -61.41651}, {10.65158, -61.41654}, {10.65157, -61.4169}, {10.65155, -61.41714}, {10.65155, -61.41721}, {10.65151, -61.41766}, {10.65146, -61.41805}, {10.65136, -61.41874}, {10.65128, -61.41923}, {10.65105, -61.42039}, {10.65071, -61.42203}, {10.6504, -61.42334}, {10.65038, -61.42343}, {10.65037, -61.4235}, {10.64989, -61.42551}, {10.64986, -61.42562}, {10.64978, -61.42597}, {10.64975, -61.42612}, {10.6497, -61.42646}, {10.64966, -61.42678}, {10.64963, -61.42711}, {10.64958, -61.42754}, {10.64958, -61.42779}, {10.64956, -61.42833}, {10.64951, -61.42993}, {10.64949, -61.43069}, {10.64946, -61.43211}, {10.6494, -61.4345}, {10.64938, -61.43502}, {10.64935, -61.43704}, {10.64934, -61.43705}, {10.64932, -61.43797}, {10.64927, -61.43941}, {10.64927, -61.43944}, {10.64925, -61.44075}, {10.64925, -61.44081}, {10.64926, -61.44129}, {10.64928, -61.44185}, {10.64931, -61.44221}, {10.64932, -61.4424}, {10.64934, -61.44286}, {10.64939, -61.44357}, {10.64942, -61.44413}, {10.64944, -61.44453}, {10.64945, -61.44467}, {10.64949, -61.44524}, {10.6495, -61.44541}, {10.64951, -61.44557}, {10.64953, -61.44612}, {10.64957, -61.44679}, {10.64966, -61.44847}, {10.64967, -61.44885}, {10.64969, -61.44958}, {10.64969, -61.44976}, {10.64982, -61.45115}, {10.64987, -61.45184}, {10.6499, -61.45317}, {10.6499, -61.4535}, {10.64985, -61.45441}, {10.6498, -61.45483}, {10.64976, -61.45526}, {10.64969, -61.45591}, {10.64963, -61.45644}, {10.64955, -61.45711}, {10.64951, -61.45754}, {10.64951, -61.45756}, {10.64937, -61.45864}, {10.64934, -61.45904}, {10.64923, -61.46002}, {10.64917, -61.46049}, {10.64909, -61.46129}, {10.64902, -61.46179}, {10.64891, -61.46281}, {10.64875, -61.4643}, {10.64858, -61.46578}, {10.64853, -61.46615}, {10.64832, -61.4679}, {10.64818, -61.469}, {10.64809, -61.46975}, {10.64808, -61.46991}, {10.648, -61.47063}, {10.64779, -61.4725}, {10.64767, -61.47368}, {10.64767, -61.47369}, {10.64767, -61.47371}, {10.64767, -61.47373}, {10.64766, -61.47375}, {10.64766, -61.47377}, {10.64766, -61.47379}, {10.64766, -61.47381}, {10.64765, -61.47383}, {10.64765, -61.47384}, {10.64765, -61.47386}, {10.64765, -61.47388}, {10.64765, -61.4739}, {10.64764, -61.47392}, {10.64764, -61.47394}, {10.64764, -61.47396}, {10.64764, -61.47398}, {10.64763, -61.474}, {10.64763, -61.47402}, {10.64763, -61.47403}, {10.64763, -61.47405}, {10.64763, -61.47407}, {10.64762, -61.47409}, {10.64762, -61.47411}, {10.64762, -61.47413}, {10.64762, -61.47415}, {10.64761, -61.47417}, {10.64761, -61.47419}, {10.64761, -61.47421}, {10.64761, -61.47422}, {10.64761, -61.47424}, {10.6476, -61.47426}, {10.6476, -61.47428}, {10.6476, -61.4743}, {10.6476, -61.47432}, {10.64759, -61.47434}, {10.64759, -61.47436}, {10.64759, -61.47438}, {10.64759, -61.4744}, {10.64758, -61.47442}, {10.64758, -61.47443}, {10.64758, -61.47445}, {10.64758, -61.47447}, {10.64758, -61.47449}, {10.64757, -61.47451}, {10.64757, -61.47453}, {10.64757, -61.47455}, {10.64757, -61.47457}, {10.64756, -61.47459}, {10.64756, -61.47461}, {10.64756, -61.47462}, {10.64756, -61.47464}, {10.64756, -61.47466}, {10.64755, -61.47468}, {10.64755, -61.4747}, {10.64755, -61.47472}, {10.64755, -61.47474}, {10.64754, -61.47476}, {10.64754, -61.47478}, {10.64754, -61.4748}, {10.64754, -61.47481}, {10.64754, -61.47483}, {10.64753, -61.47485}, {10.64753, -61.47487}, {10.64753, -61.47489}, {10.64753, -61.47491}, {10.64752, -61.47493}, {10.64752, -61.47495}, {10.64752, -61.47497}, {10.64752, -61.47499}, {10.64752, -61.475}, {10.64751, -61.47502}, {10.64751, -61.47504}, {10.64751, -61.47506}, {10.64751, -61.47508}, {10.64751, -61.4751}, {10.6475, -61.47512}, {10.6475, -61.47514}, {10.6475, -61.47516}, {10.6475, -61.47518}, {10.6475, -61.4752}, {10.64749, -61.47521}, {10.64749, -61.47523}, {10.64749, -61.47525}, {10.64749, -61.47527}, {10.64749, -61.47529}, {10.64748, -61.47531}, {10.64748, -61.47533}, {10.64748, -61.47535}, {10.64748, -61.47537}, {10.64748, -61.47539}, {10.64747, -61.4754}, {10.64747, -61.47542}, {10.64747, -61.47544}, {10.64747, -61.47546}, {10.64747, -61.47548}, {10.64746, -61.4755}, {10.64746, -61.47553}, {10.64746, -61.47555}, {10.64746, -61.47557}, {10.64746, -61.47559}, {10.64719, -61.47816}, {10.647, -61.47971}, {10.64688, -61.48075}, {10.64678, -61.4815}, {10.64676, -61.48166}, {10.64647, -61.48419}, {10.64637, -61.4854}, {10.64625, -61.48614}, {10.64614, -61.48724}, {10.64612, -61.48831}, {10.64611, -61.48847}, {10.64611, -61.48852}, {10.64611, -61.4888}, {10.64618, -61.49143}, {10.64629, -61.49485}, {10.6463, -61.49579}, {10.6463, -61.49582}, {10.64631, -61.49619}, {10.64635, -61.49673}, {10.64635, -61.49674}, {10.64641, -61.49734}, {10.64644, -61.49765}, {10.64651, -61.49822}, {10.64654, -61.49837}, {10.64656, -61.49844}, {10.64659, -61.49863}, {10.64668, -61.49928}, {10.64672, -61.49961}, {10.64679, -61.49993}, {10.64681, -61.50004}, {10.64691, -61.50035}, {10.64716, -61.50111}, {10.64743, -61.50207}, {10.64753, -61.50252}, {10.64767, -61.50362}, {10.64767, -61.50376}, {10.64772, -61.5047}, {10.6477211, -61.5047516}, {10.6477224, -61.5047959}, {10.6477198, -61.5048321}, {10.647723, -61.5048702}, {10.6477198, -61.5048965}, {10.6477238, -61.50493}, {10.6477238, -61.5049649}, {10.6477238, -61.5050037}, {10.6477216, -61.5050419}, {10.6477246, -61.5050816}, {10.6477246, -61.5051232}, {10.6477216, -61.5051653}, {10.6477233, -61.5052131}, {10.6477272, -61.5052654}, {10.6477285, -61.5053029}, {10.6477269, -61.5053423}, {10.6477259, -61.5053834}, {10.6477285, -61.5054263}, {10.6477259, -61.5054518}, {10.6477272, -61.5054907}, {10.6477269, -61.5055408}, {10.6477312, -61.5055832}, {10.6477299, -61.5056221}, {10.6477295, -61.5056883}, {10.6477299, -61.5057348}, {10.6477311, -61.5057808}, {10.6477325, -61.5058166}, {10.6477337, -61.5058533}, {10.6477338, -61.5058863}, {10.6477322, -61.5059216}, {10.6477331, -61.5059693}, {10.6477351, -61.5060128}, {10.6477357, -61.5060651}, {10.6477374, -61.5061201}, {10.6477384, -61.5061691}, {10.6477403, -61.5062328}, {10.6477397, -61.5062831}, {10.6477374, -61.5063454}, {10.6477344, -61.5063998}, {10.6477337, -61.5064474}, {10.6477298, -61.5064896}, {10.6477269, -61.5065278}, {10.6477186, -61.5065741}, {10.6477146, -61.5066083}, {10.6477111, -61.506678}, {10.647704, -61.506721}, {10.6477008, -61.5067679}, {10.6476961, -61.5068068}, {10.64769, -61.5068497}, {10.647685, -61.506908}, {10.6476797, -61.5069603}, {10.6476755, -61.507016}, {10.6476705, -61.5070623}, {10.6476613, -61.5071132}, {10.6476478, -61.5071823}, {10.6476454, -61.5072393}, {10.6476441, -61.5072944}, {10.6476402, -61.5073439}, {10.6476415, -61.5073883}, {10.6476415, -61.5074418}, {10.6476441, -61.5074849}, {10.6476507, -61.5075531}};
    //waypoints array to hold the 23 waypoints to be used for public routing and the last element will be the fare the user has to pay
    double[][] waypoints_w_fare = {{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0}};

    //function to find which division the user would start and end on the route
    int Division_Finder(double x){
        int division = 0;
        if ((x <= -61.284461) && (x >= -61.323536)) {
            division = 1;
        }
        else if ((x< -61.323536) && (x >= -61.352951)) {
            division = 2;
        }
        else if ((x< -61.352951) && (x >= -61.372165)) {
            division = 3;
        }
        else if ((x< -61.372165) && (x >= -61.395854)) {
            division = 4;
        }
        else if ((x< -61.395854) && (x >= -61.425690)) {
            division = 5;
        }

        else if ((x< -61.425690) & (x >= -61.448579)) {
            division = 6;
        }

        else if ((x< -61.448579) & (x >= -61.5075531)) {
            division = 7;
        }
        return division;
    }


    //function calculates the nearest coordinate on the Bus Route from the users start and end location and outputs these points along with 21 in between coordinates along the bus route, as well as the fare the user should have to pay
    double[][] routecalc (double[][] user_cos){
        double snumx = 0;       //variable to hold the smallest square distance from the users starting location
        double snumy = 0;       //variable to hold the smallest square distance from the users end location
        int smcopox = 0;        //variable that is used to find the position of the PBR route coordinate that is closest to the users starting location
        int smcopoy = 0;        //variable that is used to find the position of the PBR route coordinate that is closest to the users end location
        double routessum;       //variable that holds the sum of the squares of each coordinate on the PBR
        double resx;            //square of the distance the user is from a coordinate
        double resy;
        int start_route_pos;    //variable the will hold the array position of the PBR coordinate that is closest to the users starting location
        int end_route_pos;      //variable the will hold the array position of the PBR coordinate that is closest to the users end location
        double[][] Start_PBR_Co = {{0,0}}; //array holding the coordinate along the PBR that is closest to the users starting location
        double[][] End_PBR_Co = {{0,0}};   //array holding the coordinate along the PBR that is closest to the users end location
        int num_of_cos;
        int iterator;
        int i;
        double Start_PBR_Lo;     //longitude of the users start coordinate along the PBR
        double End_PBR_Lo;       //longitude of the users end coordinate along the PBR
        int Start_Division;      //The users starting division
        int End_Division;         //The users ending division

        //calculating the square of the distance the users starting and end locations are from the origin
        double xssum = (user_cos[0][0])*(user_cos[0][0]) + (user_cos[0][1])*(user_cos[0][1]);
        double yssum = (user_cos[1][0])*(user_cos[1][0]) + (user_cos[1][1])*(user_cos[1][1]);

        //finding the position of the PBR coordinate that is closest to the users start and end location
        for(i =0 ; i < PBR_coordinates.length; i++){
            routessum = ((PBR_coordinates[i][0])*(PBR_coordinates[i][0])) + ((PBR_coordinates[i][1])*(PBR_coordinates[i][1]));
            resx = java.lang.Math.abs(xssum - routessum);
            resy = java.lang.Math.abs(yssum - routessum);

            if (i==0) {
                snumx = resx;
                snumy = resy;

            }

            else if (resx < snumx){
                smcopox = i;
                snumx = resx;
            }

            if ((i !=0)&& (resy < snumy)){
                smcopoy = i;
                snumy = resy;
            }
        }

        //Setting the closest PBR route start and end array positions and coordinates to their respective variables
        start_route_pos = smcopox;
        end_route_pos = smcopoy;
        Start_PBR_Co[0][0] = PBR_coordinates[smcopox][0];
        Start_PBR_Co[0][1] = PBR_coordinates[smcopox][1];
        End_PBR_Co[0][0] = PBR_coordinates[smcopoy][0];
        End_PBR_Co[0][1] = PBR_coordinates[smcopoy][1];

        //Finding the 23 waypoints in between the PBR route starting and end points
        if (smcopox < smcopoy){
            num_of_cos = smcopoy - smcopox;
            iterator = num_of_cos/23;
            i = 0;
            if(iterator <= 1){
                while (smcopox <= smcopoy){
                    waypoints_w_fare[i][0] = PBR_coordinates[smcopox][0];
                    waypoints_w_fare[i][1] = PBR_coordinates[smcopox][1];
                    smcopox++;
                    i++;
                }
            }
            else{
                while(i < 22){
                    waypoints_w_fare[i][0] = PBR_coordinates[smcopox][0];
                    waypoints_w_fare[i][1] = PBR_coordinates[smcopox][1];
                    smcopox = smcopox + iterator;
                    i++;
                }
            }
            waypoints_w_fare[22][0] = PBR_coordinates[smcopoy][0];
            waypoints_w_fare[22][1] = PBR_coordinates[smcopoy][1];
        }

        else{
            num_of_cos = smcopox - smcopoy;
            iterator = num_of_cos/23;
            i = 0;
            if(iterator <= 1){
                while (smcopoy <= smcopox){
                    waypoints_w_fare[i][0] = PBR_coordinates[smcopoy][0];
                    waypoints_w_fare[i][1] = PBR_coordinates[smcopoy][1];
                    smcopoy++;
                    i++;
                }
            }
            else{
                while(i < 22){
                    waypoints_w_fare[i][0] = PBR_coordinates[smcopoy][0];
                    waypoints_w_fare[i][1] = PBR_coordinates[smcopoy][1];
                    smcopoy = smcopoy + iterator;
                    i++;
                }
            }
            waypoints_w_fare[22][0] = PBR_coordinates[smcopox][0];
            waypoints_w_fare[22][1] = PBR_coordinates[smcopox][1];
        }


        //Finding the fare the user has to pay
        Start_PBR_Lo = PBR_coordinates[start_route_pos][1];
        End_PBR_Lo = PBR_coordinates[end_route_pos][1];

        Start_Division = Division_Finder(Start_PBR_Lo);
        End_Division = Division_Finder(End_PBR_Lo);

        if (Start_PBR_Lo <= -61.504627){
            waypoints_w_fare[23][0] = 8;
        }

        else if(Start_Division == End_Division){
            waypoints_w_fare[23][0] = 5;
        }

        else if (Start_Division < End_Division) {
            if (Start_Division == 1) {
                if (End_PBR_Lo > -61.352951) {
                    waypoints_w_fare[23][0] = 5;
                }
                else if((End_PBR_Lo <= -61.352951) && (End_PBR_Lo > -61.409500)) {
                    waypoints_w_fare[23][0] = 6;
                }
                else if((End_PBR_Lo <= -61.409500) && (End_PBR_Lo > -61.448579)) {
                    waypoints_w_fare[23][0] = 7;
                }
                else if((End_PBR_Lo <= -61.448579)) {
                    waypoints_w_fare[23][0] = 8;
                }
            }

            else if (Start_Division ==2) {

                if (End_PBR_Lo > -61.409500) {
                    waypoints_w_fare[23][0] = 5;
                }
                else if((End_PBR_Lo <= -61.409500) && (End_PBR_Lo > -61.448579)) {
                    waypoints_w_fare[23][0] = 6;
                }
                else if((End_PBR_Lo <= -61.448579) && (End_PBR_Lo > -61.455254)) {
                    waypoints_w_fare[23][0] = 7;
                }
                else if(End_PBR_Lo <= -61.455254) {
                    waypoints_w_fare[23][0] = 8;
                }
            }
            else if (Start_Division ==3) {
                if (End_PBR_Lo > -61.409500) {
                    waypoints_w_fare[23][0] = 5;
                }
                else if((End_PBR_Lo <= -61.409500) && (End_PBR_Lo > -61.455254)) {
                    waypoints_w_fare[23][0] = 6;
                }
                else if(End_PBR_Lo <= -61.455254) {
                    waypoints_w_fare[23][0] = 7;
                }
            }
            else if (Start_Division ==4) {
                if (End_PBR_Lo > -61.425690) {
                    waypoints_w_fare[23][0] = 5;
                }
                else if((End_PBR_Lo <= -61.425690) && (End_PBR_Lo > -61.455254)) {
                    waypoints_w_fare[23][0] = 6;
                }
                else if(End_PBR_Lo <= -61.455254) {
                    waypoints_w_fare[23][0] = 7;
                }
            }
            else if (Start_Division ==5) {
                if (End_PBR_Lo > -61.455254) {
                    waypoints_w_fare[23][0] = 5;
                }
                else if(End_PBR_Lo <= -61.455254) {
                    waypoints_w_fare[23][0] = 6;
                }
            }
            else if (Start_Division ==6) {
                if (End_PBR_Lo > -61.469746) {
                    waypoints_w_fare[23][0] = 5;
                }
                else if(End_PBR_Lo <= -61.469746) {
                    waypoints_w_fare[23][0] = 6;
                }
            }
        }
        else if (End_Division < Start_Division) {
            if (Start_Division == 7) {
                if (End_PBR_Lo< -61.448579) {
                    waypoints_w_fare[23][0] = 5;
                }
                else if((End_PBR_Lo >= -61.448579) && (End_PBR_Lo < -61.395854)) {
                    waypoints_w_fare[23][0] = 6;
                }
                else if((End_PBR_Lo >= -61.395854) && (End_PBR_Lo < -61.352951)) {
                    waypoints_w_fare[23][0] = 7;
                }
                else if(End_PBR_Lo >= -61.352951) {
                    waypoints_w_fare[23][0] = 8;
                }
            }
            else if( Start_Division ==6){
                if (End_PBR_Lo <= -61.395854) {
                    waypoints_w_fare[23][0] = 5;
                }
                else if((End_PBR_Lo >= -61.395854) && (End_PBR_Lo < -61.352951)) {
                    waypoints_w_fare[23][0] = 6;
                }
                else if((End_PBR_Lo >= -61.352951) && (End_PBR_Lo < -61.323536)) {
                    waypoints_w_fare[23][0] = 7;
                }
                else if(End_PBR_Lo >= -61.323536) {
                    waypoints_w_fare[23][0] = 8;
                }
            }
            else if (Start_Division ==5) {
                if (End_PBR_Lo <= -61.352951){
                    waypoints_w_fare[23][0] = 5;
                }
                else if((End_PBR_Lo >= -61.352951) && (End_PBR_Lo < -61.323536)) {
                    waypoints_w_fare[23][0] = 6;
                }
                else if(End_PBR_Lo >= -61.323536) {
                    waypoints_w_fare[23][0] = 7;
                }
            }
            else if (Start_Division ==4) {
                if (End_PBR_Lo <= -61.352951) {
                    waypoints_w_fare[23][0] = 5;
                }
                else if((End_PBR_Lo >= -61.352951) && (End_PBR_Lo < -61.298953)) {
                    waypoints_w_fare[23][0] = 6;
                }
                else if(End_PBR_Lo >= -61.298953) {
                    waypoints_w_fare[23][0] = 7;
                }
            }
            else if (Start_Division ==3) {
                if (End_PBR_Lo <= -61.323536) {
                    waypoints_w_fare[23][0] = 5;
                }
                else if(End_PBR_Lo >= -61.323536) {
                    waypoints_w_fare[23][0] = 6;
                }
            }
            else if (Start_Division ==2) {
                if (End_PBR_Lo <= -61.298953) {
                    waypoints_w_fare[23][0] = 5;
                }
                else if(End_PBR_Lo >= -61.298953) {
                    waypoints_w_fare[23][0] = 6;
                }
            }
        }
        return (waypoints_w_fare);
    }
}